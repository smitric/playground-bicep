on:
  push:
    branches:
      - "**"
    paths:
      - GovernancePolicy/**
  pull_request:
    branches:
      - main

env:
  bicepfilePath: ./GovernancePolicy/main.bicep
  region: westeurope
  folderToCreatePolicyFiles: policies

name: Governance Policy Actions
jobs:
  validate:
    runs-on: ubuntu-latest
    name: "Validate policies"
    steps:
      - uses: actions/checkout@v3

      - name: Run Bicep linter
        run: az bicep build --file $bicepfilePath

      - uses: azure/login@v1
        name: Run azure login
        with:
          creds: ${{ secrets.AZURE_RESOURCE_POLICY_CONTRIBUTOR }}

      - uses: azure/arm-deploy@v1
        name: Run validation
        with:
          scope: subscription
          region: ${{ env.region }}
          template: ${{ env.bicepfilePath }}
          deploymentMode: Validate
          deploymentName: github-action-deploy-${{ github.run_number }}

      - uses: azure/arm-deploy@v1
        name: Run plan
        with:
          scope: subscription
          region: ${{ env.region }}
          template: ${{ env.bicepfilePath }}
          deploymentName: github-action-deploy-${{ github.run_number }}
          additionalArguments: --what-if

  deploy:
    runs-on: ubuntu-latest
    name: "Deploy policies"
    if: github.ref_name == 'main'
    needs: validate
    steps:
      - uses: actions/checkout@v3

      - uses: azure/login@v1
        name: Run azure login
        with:
          creds: ${{ secrets.AZURE_RESOURCE_POLICY_CONTRIBUTOR }}

      - name: Create json policy files from what-if result
        run: |
          $whatIfResult = az deployment sub what-if `
              --location $env:region `
              --template-file $env:bicepfilePath `
              --no-pretty-print
          $whatIfResultJson  = $whatIfResult | ConvertFrom-Json
          foreach ($change in $whatIfResultJson.changes){
              $name = $change.after.name
              $nameWithoutSpace = $name -replace " ", "_"
              $policyDir = "$env:folderToCreatePolicyFiles/$nameWithoutSpace"
              
              (New-Item -Path $policyDir -ItemType directory) | Out-Null
              $policy = $change.after | Select-Object * -ExcludeProperty apiVersion
              $fileName = "$policyDir/policy.json"
              $policy | ConvertTo-Json -Depth 10 | Out-File "$fileName"
              Write-Host "File $filename created for '$name'"
          }
        shell: pwsh

      - name: Create or Update Azure Policies
        uses: azure/manage-azure-policy@v0
        with:
          paths: |
            ${{ env.folderToCreatePolicyFiles }}/**
